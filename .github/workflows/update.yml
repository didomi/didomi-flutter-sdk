name: Update

# Triggered manually or on release creation
on:
  workflow_dispatch:
    inputs:
      increment:
        description: "Increment (major, minor, patch)"
        required: true
        default: "patch"
      force:
        description: "Force update (even if sdk is up to date)"
        required: false
        default: "false"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  update:
    name: Update version and dependencies
    runs-on: test

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: "12.x"
      - uses: subosito/flutter-action@v1
        with:
          channel: "stable"

      - name: Install dependencies
        run: flutter pub get

      - name: Check if Flutter SDK requires update
        if : github.event.inputs.force != 'true'
        run: bash .github/scripts/check_before_update.sh

      - name: Update Flutter SDK
        run: bash .github/scripts/update.sh ${{ github.event.inputs.increment }}

  analyse:
    name: Analyse Flutter
    needs: update
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: "12.x"
      - uses: subosito/flutter-action@v1
        with:
          channel: "stable"

      - name: Install dependencies
        run: flutter pub get

      # Uncomment this step to verify the use of 'dart format' on each commit.
      # - name: Verify formatting
      #   run: dart format --output=none --set-exit-if-changed .
      #   run: dart format --output=none --set-exit-if-changed example

      # Consider passing '--fatal-infos' for slightly stricter analysis.
      - name: Analyze project source
        run: flutter analyze

#  test_android:
#    name: Testing Android
#    needs: analyse
#    runs-on: ubuntu-latest
#
#    steps:
#      - uses: actions/checkout@v2
#      - uses: actions/setup-java@v1
#        with:
#          java-version: "12.x"
#      - uses: subosito/flutter-action@v1
#        with:
#          channel: "stable"
#
#      - name: Install dependencies
#        run: flutter pub get
#
#      # Connect to GCloud
#      - name: Login to Google Cloud
#        uses: google-github-actions/setup-gcloud@master
#        with:
#          version: "342.0.0"
#          service_account_key: ${{ secrets.GCLOUD_AUTH }}
#
#      - name: Set current project
#        run: gcloud config set project ${{ secrets.FIREBASE_PROJECT_ID }}
#
#      # Build and upload each scenarios to firebase
#      - name: Run UI tests
#        run: bash .github/scripts/uitests_for_android.sh ${GITHUB_HEAD_REF}
#
#  test_ios:
#    name: Testing iOS
#    needs: analyse
#    runs-on: self-hosted
#
#    steps:
#      - uses: actions/checkout@v2
#      - uses: actions/setup-java@v1
#        with:
#          java-version: "12.x"
#      - uses: subosito/flutter-action@v1
#        with:
#          channel: "stable"
#
#      - name: Install dependencies
#        run: flutter pub get
#
#      # Connect to GCloud
#      - name: Login to Google Cloud
#        uses: google-github-actions/setup-gcloud@master
#        with:
#          version: "342.0.0"
#          service_account_key: ${{ secrets.GCLOUD_AUTH }}
#
#      - name: Set current project
#        run: gcloud config set project ${{ secrets.FIREBASE_PROJECT_ID }}
#
#      # Build and upload each scenarios to firebase
#      - name: Run UI tests
#        run: sh .github/scripts/uitests_for_ios.sh ${GITHUB_HEAD_REF}

  tag:
    name: Tag
    needs: analyse
#    needs: [test_ios, test_android]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: "12.x"
      - uses: subosito/flutter-action@v1
        with:
          channel: "stable"

      - name: Install dependencies
        run: flutter pub get

      - name: Tag and push
        run: sh .github/scripts/tag.sh
